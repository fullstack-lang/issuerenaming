// generated by ModelGongGraphFileTemplate
package models

func IsStaged[Type Gongstruct](stage *StageStruct, instance *Type) (ok bool) {

	switch target := any(instance).(type) {
	// insertion point for stage
	case *Foo:
		ok = stage.IsStagedFoo(target)

	case *Waldo:
		ok = stage.IsStagedWaldo(target)

	}
	return
}

// insertion point for stage per struct
	func (stage *StageStruct) IsStagedFoo(foo *Foo) (ok bool) {

		_, ok = stage.Foos[foo]
	
		return
	}

	func (stage *StageStruct) IsStagedWaldo(waldo *Waldo) (ok bool) {

		_, ok = stage.Waldos[waldo]
	
		return
	}


// StageBranch stages instance and apply StageBranch on all gongstruct instances that are
// referenced by pointers or slices of pointers of the insance
//
// the algorithm stops along the course of graph if a vertex is already staged
func StageBranch[Type Gongstruct](stage *StageStruct, instance *Type) {

	switch target := any(instance).(type) {
	// insertion point for stage branch
	case *Foo:
		stage.StageBranchFoo(target)

	case *Waldo:
		stage.StageBranchWaldo(target)

	}
}

// insertion point for stage branch per struct
func (stage *StageStruct) StageBranchFoo(foo *Foo) {

	// check if instance is already staged
	if IsStaged(stage, foo) {
		return
	}

	foo.Stage()

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers
	for _, _waldo := range foo.Waldos {
		StageBranch(stage, _waldo)
	}

}

func (stage *StageStruct) StageBranchWaldo(waldo *Waldo) {

	// check if instance is already staged
	if IsStaged(stage, waldo) {
		return
	}

	waldo.Stage()

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}


// UnstageBranch stages instance and apply UnstageBranch on all gongstruct instances that are
// referenced by pointers or slices of pointers of the insance
//
// the algorithm stops along the course of graph if a vertex is already staged
func UnstageBranch[Type Gongstruct](stage *StageStruct, instance *Type) {

	switch target := any(instance).(type) {
	// insertion point for unstage branch
	case *Foo:
		stage.UnstageBranchFoo(target)

	case *Waldo:
		stage.UnstageBranchWaldo(target)

	}
}

// insertion point for unstage branch per struct
func (stage *StageStruct) UnstageBranchFoo(foo *Foo) {

	// check if instance is already staged
	if ! IsStaged(stage, foo) {
		return
	}

	foo.Unstage()

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers
	for _, _waldo := range foo.Waldos {
		UnstageBranch(stage, _waldo)
	}

}

func (stage *StageStruct) UnstageBranchWaldo(waldo *Waldo) {

	// check if instance is already staged
	if ! IsStaged(stage, waldo) {
		return
	}

	waldo.Unstage()

	//insertion point for the staging of instances referenced by pointers

	//insertion point for the staging of instances referenced by slice of pointers

}

