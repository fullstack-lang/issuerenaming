// generated by ModelGongFileTemplate
package models

import (
	"errors"
	"fmt"
)

// errUnkownEnum is returns when a value cannot match enum values
var errUnkownEnum = errors.New("unkown enum")

// needed to avoid when fmt package is not needed by generated code
var __dummy__fmt_variable fmt.Scanner

// swagger:ignore
type __void any

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Foos           map[*Foo]any
	Foos_mapString map[string]*Foo

	OnAfterFooCreateCallback OnAfterCreateInterface[Foo]
	OnAfterFooUpdateCallback OnAfterUpdateInterface[Foo]
	OnAfterFooDeleteCallback OnAfterDeleteInterface[Foo]
	OnAfterFooReadCallback   OnAfterReadInterface[Foo]

	Waldos           map[*Waldo]any
	Waldos_mapString map[string]*Waldo

	OnAfterWaldoCreateCallback OnAfterCreateInterface[Waldo]
	OnAfterWaldoUpdateCallback OnAfterUpdateInterface[Waldo]
	OnAfterWaldoDeleteCallback OnAfterDeleteInterface[Waldo]
	OnAfterWaldoReadCallback   OnAfterReadInterface[Waldo]

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int

	// store meta package import
	MetaPackageImportPath  string
	MetaPackageImportAlias string
	Map_DocLink_Renaming   map[string]GONG__Identifier

	// map_Gongstruct_BackPointer is storage of back pointers
	map_Gongstruct_BackPointer map[any]any
}

func SetBackPointer[T Gongstruct](stageStruct *StageStruct, instance *T, backPointer any) {
	stageStruct.map_Gongstruct_BackPointer[instance] = backPointer
}
func GetBackPointer[T Gongstruct](stageStruct *StageStruct, instance *T) (backPointer any) {
	backPointer, _ = stageStruct.map_Gongstruct_BackPointer[instance]
	return
}

type GONG__Identifier struct {
	Ident string
	Type  GONG__ExpressionType
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

// OnAfterCreateInterface callback when an instance is updated from the front
type OnAfterCreateInterface[Type Gongstruct] interface {
	OnAfterCreate(stage *StageStruct,
		instance *Type)
}

// OnAfterReadInterface callback when an instance is updated from the front
type OnAfterReadInterface[Type Gongstruct] interface {
	OnAfterRead(stage *StageStruct,
		instance *Type)
}

// OnAfterUpdateInterface callback when an instance is updated from the front
type OnAfterUpdateInterface[Type Gongstruct] interface {
	OnAfterUpdate(stage *StageStruct, old, new *Type)
}

// OnAfterDeleteInterface callback when an instance is updated from the front
type OnAfterDeleteInterface[Type Gongstruct] interface {
	OnAfterDelete(stage *StageStruct,
		staged, front *Type)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitFoo(foo *Foo)
	CheckoutFoo(foo *Foo)
	CommitWaldo(waldo *Waldo)
	CheckoutWaldo(waldo *Waldo)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Foos:           make(map[*Foo]any),
	Foos_mapString: make(map[string]*Foo),

	Waldos:           make(map[*Waldo]any),
	Waldos_mapString: make(map[string]*Waldo),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
	map_Gongstruct_BackPointer:     make(map[any]any),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Foo"] = len(stage.Foos)
	stage.Map_GongStructName_InstancesNb["Waldo"] = len(stage.Waldos)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Foo"] = len(stage.Foos)
	stage.Map_GongStructName_InstancesNb["Waldo"] = len(stage.Waldos)

}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
// Stage puts foo to the model stage
func (foo *Foo) Stage() *Foo {
	Stage.Foos[foo] = __member
	Stage.Foos_mapString[foo.Name] = foo

	return foo
}

// Unstage removes foo off the model stage
func (foo *Foo) Unstage() *Foo {
	delete(Stage.Foos, foo)
	delete(Stage.Foos_mapString, foo.Name)
	return foo
}

// commit foo to the back repo (if it is already staged)
func (foo *Foo) Commit() *Foo {
	if _, ok := Stage.Foos[foo]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitFoo(foo)
		}
	}
	return foo
}

// Checkout foo to the back repo (if it is already staged)
func (foo *Foo) Checkout() *Foo {
	if _, ok := Stage.Foos[foo]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutFoo(foo)
		}
	}
	return foo
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of foo to the model stage
func (foo *Foo) StageCopy() *Foo {
	_foo := new(Foo)
	*_foo = *foo
	_foo.Stage()
	return _foo
}

// StageAndCommit appends foo to the model stage and commit to the orm repo
func (foo *Foo) StageAndCommit() *Foo {
	foo.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMFoo(foo)
	}
	return foo
}

// DeleteStageAndCommit appends foo to the model stage and commit to the orm repo
func (foo *Foo) DeleteStageAndCommit() *Foo {
	foo.Unstage()
	DeleteORMFoo(foo)
	return foo
}

// StageCopyAndCommit appends a copy of foo to the model stage and commit to the orm repo
func (foo *Foo) StageCopyAndCommit() *Foo {
	_foo := new(Foo)
	*_foo = *foo
	_foo.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMFoo(foo)
	}
	return _foo
}

// CreateORMFoo enables dynamic staging of a Foo instance
func CreateORMFoo(foo *Foo) {
	foo.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMFoo(foo)
	}
}

// DeleteORMFoo enables dynamic staging of a Foo instance
func DeleteORMFoo(foo *Foo) {
	foo.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMFoo(foo)
	}
}

// for satisfaction of GongStruct interface
func (foo *Foo) GetName() (res string) {
	return foo.Name
}

// Stage puts waldo to the model stage
func (waldo *Waldo) Stage() *Waldo {
	Stage.Waldos[waldo] = __member
	Stage.Waldos_mapString[waldo.Name] = waldo

	return waldo
}

// Unstage removes waldo off the model stage
func (waldo *Waldo) Unstage() *Waldo {
	delete(Stage.Waldos, waldo)
	delete(Stage.Waldos_mapString, waldo.Name)
	return waldo
}

// commit waldo to the back repo (if it is already staged)
func (waldo *Waldo) Commit() *Waldo {
	if _, ok := Stage.Waldos[waldo]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitWaldo(waldo)
		}
	}
	return waldo
}

// Checkout waldo to the back repo (if it is already staged)
func (waldo *Waldo) Checkout() *Waldo {
	if _, ok := Stage.Waldos[waldo]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutWaldo(waldo)
		}
	}
	return waldo
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of waldo to the model stage
func (waldo *Waldo) StageCopy() *Waldo {
	_waldo := new(Waldo)
	*_waldo = *waldo
	_waldo.Stage()
	return _waldo
}

// StageAndCommit appends waldo to the model stage and commit to the orm repo
func (waldo *Waldo) StageAndCommit() *Waldo {
	waldo.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMWaldo(waldo)
	}
	return waldo
}

// DeleteStageAndCommit appends waldo to the model stage and commit to the orm repo
func (waldo *Waldo) DeleteStageAndCommit() *Waldo {
	waldo.Unstage()
	DeleteORMWaldo(waldo)
	return waldo
}

// StageCopyAndCommit appends a copy of waldo to the model stage and commit to the orm repo
func (waldo *Waldo) StageCopyAndCommit() *Waldo {
	_waldo := new(Waldo)
	*_waldo = *waldo
	_waldo.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMWaldo(waldo)
	}
	return _waldo
}

// CreateORMWaldo enables dynamic staging of a Waldo instance
func CreateORMWaldo(waldo *Waldo) {
	waldo.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMWaldo(waldo)
	}
}

// DeleteORMWaldo enables dynamic staging of a Waldo instance
func DeleteORMWaldo(waldo *Waldo) {
	waldo.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMWaldo(waldo)
	}
}

// for satisfaction of GongStruct interface
func (waldo *Waldo) GetName() (res string) {
	return waldo.Name
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMFoo(Foo *Foo)
	CreateORMWaldo(Waldo *Waldo)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMFoo(Foo *Foo)
	DeleteORMWaldo(Waldo *Waldo)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Foos = make(map[*Foo]any)
	stage.Foos_mapString = make(map[string]*Foo)

	stage.Waldos = make(map[*Waldo]any)
	stage.Waldos_mapString = make(map[string]*Waldo)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Foos = nil
	stage.Foos_mapString = nil

	stage.Waldos = nil
	stage.Waldos_mapString = nil

}

func (stage *StageStruct) Unstage() { // insertion point for array nil
	for foo := range stage.Foos {
		foo.Unstage()
	}

	for waldo := range stage.Waldos {
		waldo.Unstage()
	}

}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type Gongstruct interface {
	// insertion point for generic types
	Foo | Waldo
}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type PointerToGongstruct interface {
	// insertion point for generic types
	*Foo | *Waldo
	GetName() string
}

type GongstructSet interface {
	map[any]any |
		// insertion point for generic types
		map[*Foo]any |
		map[*Waldo]any |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

type GongstructMapString interface {
	map[any]any |
		// insertion point for generic types
		map[string]*Foo |
		map[string]*Waldo |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

// GongGetSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetSet[Type GongstructSet]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[*Foo]any:
		return any(&Stage.Foos).(*Type)
	case map[*Waldo]any:
		return any(&Stage.Waldos).(*Type)
	default:
		return nil
	}
}

// GongGetMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetMap[Type GongstructMapString]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[string]*Foo:
		return any(&Stage.Foos_mapString).(*Type)
	case map[string]*Waldo:
		return any(&Stage.Waldos_mapString).(*Type)
	default:
		return nil
	}
}

// GetGongstructInstancesSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gongstruct identifier
func GetGongstructInstancesSet[Type Gongstruct]() *map[*Type]any {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Foo:
		return any(&Stage.Foos).(*map[*Type]any)
	case Waldo:
		return any(&Stage.Waldos).(*map[*Type]any)
	default:
		return nil
	}
}

// GetGongstructInstancesMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GetGongstructInstancesMap[Type Gongstruct]() *map[string]*Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Foo:
		return any(&Stage.Foos_mapString).(*map[string]*Type)
	case Waldo:
		return any(&Stage.Waldos_mapString).(*map[string]*Type)
	default:
		return nil
	}
}

// GetAssociationName is a generic function that returns an instance of Type
// where each association is filled with an instance whose name is the name of the association
//
// This function can be handy for generating navigation function that are refactorable
func GetAssociationName[Type Gongstruct]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for instance with special fields
	case Foo:
		return any(&Foo{
			// Initialisation of associations
			// field is initialized with an instance of Waldo with the name of the field
			Waldos: []*Waldo{{Name: "Waldos"}},
		}).(*Type)
	case Waldo:
		return any(&Waldo{
			// Initialisation of associations
		}).(*Type)
	default:
		return nil
	}
}

// GetPointerReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..1) that is a pointer from one staged Gongstruct (type Start)
// instances to another (type End)
//
// The function provides a map with keys as instances of End and values to arrays of *Start
// the map is construed by iterating over all Start instances and populationg keys with End instances
// and values with slice of Start instances
func GetPointerReverseMap[Start, End Gongstruct](fieldname string) map[*End][]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Foo
	case Foo:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Waldo
	case Waldo:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetSliceOfPointersReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..N) between one staged Gongstruct instances and many others
//
// The function provides a map with keys as instances of End and values to *Start instances
// the map is construed by iterating over all Start instances and populating keys with End instances
// and values with the Start instances
func GetSliceOfPointersReverseMap[Start, End Gongstruct](fieldname string) map[*End]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Foo
	case Foo:
		switch fieldname {
		// insertion point for per direct association field
		case "Waldos":
			res := make(map[*Waldo]*Foo)
			for foo := range Stage.Foos {
				for _, waldo_ := range foo.Waldos {
					res[waldo_] = foo
				}
			}
			return any(res).(map[*End]*Start)
		}
	// reverse maps of direct associations of Waldo
	case Waldo:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetGongstructName returns the name of the Gongstruct
// this can be usefull if one want program robust to refactoring
func GetGongstructName[Type Gongstruct]() (res string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Foo:
		res = "Foo"
	case Waldo:
		res = "Waldo"
	}
	return res
}

// GetFields return the array of the fields
func GetFields[Type Gongstruct]() (res []string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Foo:
		res = []string{"Name", "Waldos"}
	case Waldo:
		res = []string{"Name"}
	}
	return
}

func GetFieldStringValue[Type Gongstruct](instance Type, fieldName string) (res string) {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct field value
	case Foo:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Foo).Name
		case "Waldos":
			for idx, __instance__ := range any(instance).(Foo).Waldos {
				if idx > 0 {
					res += "\n"
				}
				res += __instance__.Name
			}
		}
	case Waldo:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Waldo).Name
		}
	}
	return
}

// Last line of the template
