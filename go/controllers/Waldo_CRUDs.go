// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"github.com/fullstack-lang/issuerenaming/go/models"
	"github.com/fullstack-lang/issuerenaming/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Waldo__dummysDeclaration__ models.Waldo
var __Waldo_time__dummyDeclaration time.Duration

// An WaldoID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getWaldo updateWaldo deleteWaldo
type WaldoID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// WaldoInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postWaldo updateWaldo
type WaldoInput struct {
	// The Waldo to submit or modify
	// in: body
	Waldo *orm.WaldoAPI
}

// GetWaldos
//
// swagger:route GET /waldos waldos getWaldos
//
// # Get all waldos
//
// Responses:
// default: genericError
//
//	200: waldoDBResponse
func GetWaldos(c *gin.Context) {
	db := orm.BackRepo.BackRepoWaldo.GetDB()

	// source slice
	var waldoDBs []orm.WaldoDB
	query := db.Find(&waldoDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	waldoAPIs := make([]orm.WaldoAPI, 0)

	// for each waldo, update fields from the database nullable fields
	for idx := range waldoDBs {
		waldoDB := &waldoDBs[idx]
		_ = waldoDB
		var waldoAPI orm.WaldoAPI

		// insertion point for updating fields
		waldoAPI.ID = waldoDB.ID
		waldoDB.CopyBasicFieldsToWaldo(&waldoAPI.Waldo)
		waldoAPI.WaldoPointersEnconding = waldoDB.WaldoPointersEnconding
		waldoAPIs = append(waldoAPIs, waldoAPI)
	}

	c.JSON(http.StatusOK, waldoAPIs)
}

// PostWaldo
//
// swagger:route POST /waldos waldos postWaldo
//
// Creates a waldo
//
//	Consumes:
//	- application/json
//
//	Produces:
//	- application/json
//
//	Responses:
//	  200: nodeDBResponse
func PostWaldo(c *gin.Context) {
	db := orm.BackRepo.BackRepoWaldo.GetDB()

	// Validate input
	var input orm.WaldoAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create waldo
	waldoDB := orm.WaldoDB{}
	waldoDB.WaldoPointersEnconding = input.WaldoPointersEnconding
	waldoDB.CopyBasicFieldsFromWaldo(&input.Waldo)

	query := db.Create(&waldoDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	orm.BackRepo.BackRepoWaldo.CheckoutPhaseOneInstance(&waldoDB)
	waldo := (*orm.BackRepo.BackRepoWaldo.Map_WaldoDBID_WaldoPtr)[waldoDB.ID]

	if waldo != nil {
		models.AfterCreateFromFront(&models.Stage, waldo)
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, waldoDB)
}

// GetWaldo
//
// swagger:route GET /waldos/{ID} waldos getWaldo
//
// Gets the details for a waldo.
//
// Responses:
// default: genericError
//
//	200: waldoDBResponse
func GetWaldo(c *gin.Context) {
	db := orm.BackRepo.BackRepoWaldo.GetDB()

	// Get waldoDB in DB
	var waldoDB orm.WaldoDB
	if err := db.First(&waldoDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var waldoAPI orm.WaldoAPI
	waldoAPI.ID = waldoDB.ID
	waldoAPI.WaldoPointersEnconding = waldoDB.WaldoPointersEnconding
	waldoDB.CopyBasicFieldsToWaldo(&waldoAPI.Waldo)

	c.JSON(http.StatusOK, waldoAPI)
}

// UpdateWaldo
//
// swagger:route PATCH /waldos/{ID} waldos updateWaldo
//
// # Update a waldo
//
// Responses:
// default: genericError
//
//	200: waldoDBResponse
func UpdateWaldo(c *gin.Context) {
	db := orm.BackRepo.BackRepoWaldo.GetDB()

	// Get model if exist
	var waldoDB orm.WaldoDB

	// fetch the waldo
	query := db.First(&waldoDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.WaldoAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	waldoDB.CopyBasicFieldsFromWaldo(&input.Waldo)
	waldoDB.WaldoPointersEnconding = input.WaldoPointersEnconding

	query = db.Model(&waldoDB).Updates(waldoDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// get an instance (not staged) from DB instance, and call callback function
	waldoNew := new(models.Waldo)
	waldoDB.CopyBasicFieldsToWaldo(waldoNew)

	// get stage instance from DB instance, and call callback function
	waldoOld := (*orm.BackRepo.BackRepoWaldo.Map_WaldoDBID_WaldoPtr)[waldoDB.ID]
	if waldoOld != nil {
		models.AfterUpdateFromFront(&models.Stage, waldoOld, waldoNew)
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	// in some cases, with the marshalling of the stage, this operation might
	// generates a checkout
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the waldoDB
	c.JSON(http.StatusOK, waldoDB)
}

// DeleteWaldo
//
// swagger:route DELETE /waldos/{ID} waldos deleteWaldo
//
// # Delete a waldo
//
// default: genericError
//
//	200: waldoDBResponse
func DeleteWaldo(c *gin.Context) {
	db := orm.BackRepo.BackRepoWaldo.GetDB()

	// Get model if exist
	var waldoDB orm.WaldoDB
	if err := db.First(&waldoDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&waldoDB)

	// get an instance (not staged) from DB instance, and call callback function
	waldoDeleted := new(models.Waldo)
	waldoDB.CopyBasicFieldsToWaldo(waldoDeleted)

	// get stage instance from DB instance, and call callback function
	waldoStaged := (*orm.BackRepo.BackRepoWaldo.Map_WaldoDBID_WaldoPtr)[waldoDB.ID]
	if waldoStaged != nil {
		models.AfterDeleteFromFront(&models.Stage, waldoStaged, waldoDeleted)
	}

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
